// <auto-generated />
using System;
using ITAssetManagement.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ITAssetManagement.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ITAssetManagement.API.Models.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("AssetId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PerformedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("ITAssetManagement.API.Models.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AssetTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AssignedTo")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("numeric");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssetTag = "IT-001",
                            AssignedDate = new DateTime(2025, 2, 28, 14, 29, 32, 968, DateTimeKind.Utc).AddTicks(6830),
                            AssignedTo = "John Doe",
                            Brand = "Dell",
                            Category = "Laptop",
                            CreatedAt = new DateTime(2025, 7, 28, 14, 29, 32, 968, DateTimeKind.Utc).AddTicks(6810),
                            Location = "Floor 2, IT Dept",
                            Model = "Latitude 5520",
                            Name = "Dell Laptop",
                            PurchaseDate = new DateTime(2025, 1, 28, 14, 29, 32, 968, DateTimeKind.Utc).AddTicks(6820),
                            PurchasePrice = 1200m,
                            SerialNumber = "DL5520001",
                            Status = "Assigned",
                            UpdatedAt = new DateTime(2025, 7, 28, 14, 29, 32, 968, DateTimeKind.Utc).AddTicks(6810)
                        },
                        new
                        {
                            Id = 2,
                            AssetTag = "IT-002",
                            Brand = "HP",
                            Category = "Monitor",
                            CreatedAt = new DateTime(2025, 7, 28, 14, 29, 32, 968, DateTimeKind.Utc).AddTicks(6830),
                            Location = "Storage Room",
                            Model = "E24 G4",
                            Name = "HP Monitor",
                            PurchaseDate = new DateTime(2025, 3, 28, 14, 29, 32, 968, DateTimeKind.Utc).AddTicks(6830),
                            PurchasePrice = 250m,
                            SerialNumber = "HPE24001",
                            Status = "Available",
                            UpdatedAt = new DateTime(2025, 7, 28, 14, 29, 32, 968, DateTimeKind.Utc).AddTicks(6830)
                        },
                        new
                        {
                            Id = 3,
                            AssetTag = "IT-003",
                            Brand = "Apple",
                            Category = "Laptop",
                            CreatedAt = new DateTime(2025, 7, 28, 14, 29, 32, 968, DateTimeKind.Utc).AddTicks(6830),
                            Location = "IT Service Desk",
                            Model = "MacBook Pro 14",
                            Name = "MacBook Pro",
                            PurchaseDate = new DateTime(2025, 5, 28, 14, 29, 32, 968, DateTimeKind.Utc).AddTicks(6830),
                            PurchasePrice = 2500m,
                            SerialNumber = "MB14001",
                            Status = "Repair",
                            UpdatedAt = new DateTime(2025, 7, 28, 14, 29, 32, 968, DateTimeKind.Utc).AddTicks(6830)
                        });
                });

            modelBuilder.Entity("ITAssetManagement.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 28, 14, 29, 32, 968, DateTimeKind.Utc).AddTicks(6770),
                            Email = "admin@company.com",
                            FullName = "System Administrator",
                            IsActive = true,
                            Password = "admin123",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 28, 14, 29, 32, 968, DateTimeKind.Utc).AddTicks(6770),
                            Email = "user@company.com",
                            FullName = "Normal User",
                            IsActive = true,
                            Password = "user123",
                            Role = "User",
                            Username = "user"
                        });
                });

            modelBuilder.Entity("ITAssetManagement.API.Models.ActivityLog", b =>
                {
                    b.HasOne("ITAssetManagement.API.Models.Asset", "Asset")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("ITAssetManagement.API.Models.Asset", b =>
                {
                    b.Navigation("ActivityLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
